
import java.util.*;
import java.util.Collections;
import java.io.*;


public class EulerProblems
{


	public static int euler_problem1()
		{
			// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
			//Find the sum of all the multiples of 3 or 5 below 1000.
			int sum = 0;
			
			for(int i = 1;i<1000;i++)
			{
				if(i%3==0 || i%5==0)
					sum+=i;	
			}
			
			return sum;
		}

		
		public static int euler_problem2()
		{
			//Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
			//By starting with 1 and 2, the first 10 terms will be:1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
			//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
			
			
			int sum = 2;
			int fib = 0;
			int num1 = 1;
			int num2 = 2;
			while(fib < 4000000 || num1 < 4000000 || num2 < 4000000)
			{
				fib = num1+num2; 
				if(fib > 4000000)
				{
					break;
				}
				if(fib%2 == 0)
					sum+=fib;
				num1 = num2;
				num2 = fib;	
			}
			return sum;
		}
		

			public static long factors(long x)
		{
			
			for(long i = (long) Math.sqrt(x) +1;i>=0;i--)
			{
				if(x%i==0 && isPrime(i))
					return i;
			}

			return 0;
		}

		public static boolean isPrime(long x)
		{

			for(long i = 2;i<x;i++)
			{
				if(x%i==0)
				{
					return false;
				}

			}

			return true;
		}
	
	}